---

import Layout from '../layouts/Layout.astro';
import Hero from '../components/Hero.astro';
import categories from "../assets/data/categories.json";
import locations from '../assets/data/location.json';
import Map from '../components/Map.astro';

import {Image} from 'astro:assets';
import logoPolimi from '../assets/logos/Polimi.svg';
import logoPoliDesign from '../assets/logos/Poli.design.svg';
import logoDesignWeek from '../assets/logos/logo-design-week.png';
import mappa from  '../assets/img/MapImage.png';

/* const textContent = location.map(loc => ({
  title: loc.title,
  place: loc.place,
  description: loc.description
})); */

---


<Layout>
	
  <div class="section mostra">
    <Hero></Hero>
  </div>


    <!-- SECTION 1 -->
    <section class="text-section section">
      <!-- LOGOS -->
      <div class="logo-container">
        <div class="logo-left">
          <Image src={logoPolimi} alt="Politecnico di Milano">
          <Image src={logoPoliDesign} alt="Poli.Design">
        </div>
        <div class="logo-right">
          <Image src={logoDesignWeek} alt="Design Week">
        </div>
      </div>
      <div class="container">
          <div class="col-6">
              <h1>
                In a world where everything is in a relationship, what is the role of design?
              </h1>
              <p>The Polimi Design System (the School of Design, the Department of Design, and POLI.Design) presents “INTERDEPENDENCE - Designing Relationships”, a set of initiatives to reflect on relationships and connections through a selection of projects by design students.
                We are deeply immersed in a network of relationships that is an integral part of each of us; to understand the infinite complexity of our world, we often tend to isolate particular aspects of an event or experience and see them as constituting the totality, narrowing our perspective. In reality, each choice we make, even the act of not choosing, has consequences that may not be immediately apparent, but it is essential to understand and move to action with awareness.
                
                The recognition of interdependence fosters cooperation, collaboration, and the acknowledgement of shared responsibilities. It underscores the importance of considering the broader implications of actions and decisions, as they often have ripple effects that extend beyond immediate boundaries.
                Design, as a discipline interconnected with a variety of systems, acts as a catalyst and inherently has the potential and responsibility to foster and shape innovative, conscious, and collaborative relationships.
                
          </div>
      </div>
  </section>
  <!-- MAP SECTION -->
  <section class="map-section section">
    <div class="map-1">
      <div class="map-bg">
        <div class="pointer-blur"></div>
        <Image src={mappa}  id="map" alt="Mappa" />
      </div>
      <div class="paragraph-container">
        <div class="paragraph-box">
          {
              <h3>{locations[0].title}</h3>
              <h4>{locations[0].place}</h4>
              <h6>{locations[0].description}</h6>
          }
        </div>
      </div>
      <div class="title-container">
        <div class="title-box">
          {
            <h3 style="text-align: center; margin: 0;">{locations[0].place}</h3>
          }
        </div>
      </div>      
    </div>
  </section>
  
  <!-- SECTION 3 -->
  <section class="text-section section">
      <div class="container">
          <div class="col-4">
              <p>
                At the Fabbrica del Vapore, INTERDEPENDENCE takes the shape of an international exhibition mixing and matching the projects of the students of Politecnico di Milano (Design, Architecture, and Engineering) with those of students from almost 50 design universities from all over the world.The exhibition collects 150 projects and is animated by a palimpsest of initiatives. The opening of the exhibition will be on Tuesday, April 16, at 18:30.
                The Campus Bovisa Durando hosts the DesignXDesigners exhibition, with a display of works by students from the Polimi Design System.
                At the Salone Satellite, a dedicated stand presents the study programs of the School of Design and showcases student’s works through an interactive installation.
              </p>
              <h2>
                How can design deal with opposites and polarizations? How can design deal with the nuances in-between polarities?
              </h2>
              <p>
                We may consider a few pairs of polarities that recur in design research and practice, such as:
              </p>
              <div class = "categories-container">
                {
                    categories.map(category => (
                        <div class = "category-container">
                            <div class="category-name">
                              <span class="category">
                                {category.opposite1} /
                              </span>
                              <span class="opposite2 category">
                                &#160;{category.opposite2}
                            </span>
                            </div>
                            <div class="category-description">
                                &#160;{category.description}
                            </div>
                        </div>
                ))}
            </div>
          </div>
      </div>
  </section>


</Layout>


<!-- ---------- MAP ---------- -->
<!-- ---------- MAP ---------- -->
<!-- ---------- MAP ---------- -->

<!-- Script vecchio -->
<!-- <script>
  import gsap from 'gsap';
  import { ScrollTrigger } from "gsap/ScrollTrigger";

    document.addEventListener("DOMContentLoaded", () => {
      gsap.registerPlugin(ScrollTrigger);
      
      const map = document.getElementById("map");
  
      // Create timeline for map animation
      const mapTimeline = gsap.timeline({
        scrollTrigger: {
          trigger: ".map-section",
          start: "top top",
          end: "+=200%", // Controls how long the animation takes to complete
          pin: true,
          pinSpacing: true,
          scrub: 1, // Links animation progress to scroll position
          anticipatePin: 1
        }
      });
      
      // Add animations to timeline
      mapTimeline
        .fromTo(map, {
          scale: 1,
          x: 0,
          y: 0
        }, {
          scale: 1.5,
          x: -200,
          y: -100,
          ease: "none" // Remove easing for smoother scroll control
        })
        .to(map, {
          scale: 2,
          x: 200,
          y: 100,
          ease: "none"
        });
  });
</script> -->

<!-- Script meno vecchio con animazioni testo -->
<!-- <script>
  import gsap from 'gsap';
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  document.addEventListener("DOMContentLoaded", () => {
    gsap.registerPlugin(ScrollTrigger);
    
    const map = document.getElementById("map");
    const paragraphBox = document.querySelector(".paragraph-box");
    const titleBox = document.querySelector(".title-box");
    
    // Array of text content for each snap point
    const textContent = [
      { title: "Location 1", place: "Place 1", description: "Description 1" },
      { title: "Location 2", place: "Place 2", description: "Description 2" },
      { title: "Location 3", place: "Place 3", description: "Description 3" },
      { title: "Location 4", place: "Place 4", description: "Description 4" }
    ];

    // Create timeline for map animation
    const mapTimeline = gsap.timeline({
      scrollTrigger: {
        trigger: ".map-section",
        start: "top top",
        end: "+=100%",
        pin: true,
        pinSpacing: true,
        scrub: 1,
        anticipatePin: 1,
        markers: true,
        snap: {
          snapTo: [0, 0.33, 0.66, 1],
          duration: { min: 0.2, max: 0.8 },
          delay: 0,
          onSnap: (progress) => updateText(Math.round(progress * 3)) // Calculate snap index
        }
      }
    });

    // Function to update text content with animation
    function updateText(index) {
      const content = textContent[index];
      
      // Animate out current text
      gsap.to([paragraphBox, titleBox], {
        opacity: 0,
        y: 20,
        duration: 0.3,
        onComplete: () => {
          // Update text content
          titleBox.querySelector('h3').textContent = content.place;
          titleBox.querySelector('h4').textContent = content.title;
          paragraphBox.querySelector('h3').textContent = content.title;
          paragraphBox.querySelector('h4').textContent = content.place;
          paragraphBox.querySelector('h6').textContent = content.description;
          
          // Animate in new text
          gsap.to([paragraphBox, titleBox], {
            opacity: 1,
            y: 0,
            duration: 0.3
          });
        }
      });
    }
    
    // Add map animations to timeline
    mapTimeline
      .fromTo(map, {
        scale: 1,
        x: 0,
        y: 0,
        opacity: 1
      },{
        scale: 1.2,
        x: 100,
        y: 0,
        opacity: 1
      })
      .to(map, {
        scale: 1.5,
        x: -200,
        y: -100,
        opacity: 1
      })
      .to(map, {
        scale: 2,
        x: 600,
        y: 200,
        opacity: 1
      });
  });
</script> -->


<script src="../scripts/map.js"></script>


<!-- ---------- CATEGORY ---------- -->
<!-- ---------- CATEGORY ---------- -->
<!-- ---------- CATEGORY ---------- -->

<script>
  document.addEventListener("DOMContentLoaded", () => {
  const categoryContainers = document.querySelectorAll(".category-container");

  categoryContainers.forEach((container, index) => {
    const description = container.querySelector(".category-description");
    if (description) {
      container.addEventListener("mouseenter", () => {
        description.classList.add("show");
      });

      container.addEventListener("mouseleave", () => {
        description.classList.remove("show");
      });
    }
  });
});

</script>



<!-- ---------- SCROLL ---------- -->
<!-- ---------- SCROLL ---------- -->
<!-- ---------- SCROLL ---------- -->

<!-- scroll con scrolltrigger -->
<!-- <script>
  import gsap from 'gsap';
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { ScrollToPlugin } from "gsap/ScrollToPlugin";

  
  document.addEventListener("DOMContentLoaded", () => {
    // Register plugins
    gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

    // Get all sections
    const sections = gsap.utils.toArray<HTMLElement>('.section');
      function goToSection(index: number) {
      console.log(index);
      gsap.to(window, {
        duration: 1,
        scrollTo: {
          y: sections[index],
          autoKill: true
        },
        ease: "power2.inOut"
      });
    }
    // Create ScrollTrigger for each section
    sections.forEach((section, i) => {
      ScrollTrigger.create({
        trigger: section,
        start: "5% 95%", 
        end: "95% 5%",
        // markers: true,
        preventOverlaps: true,
        fastScrollEnd: true, // Better handling of fast scrolling
        onEnter: () => goToSection(i),
        onEnterBack: () => goToSection(i)
      });
    });

    function mostra(index: number){
      sections.forEach((section, i) => {
        if (i === index) {
          section.classList.add("mostra");
        } else {
          section.classList.remove("mostra");
        }
      });

    // Function to animate to a specific section
    
  }
  });
</script> -->

<!-- scroll con scroll to -->
<!-- <script>
  import gsap from "gsap";
import { ScrollToPlugin } from "gsap/ScrollToPlugin";

document.addEventListener("DOMContentLoaded", () => {
  gsap.registerPlugin(ScrollToPlugin);

  const sections = document.querySelectorAll(".section");
  let currentIndex = 0;
  let isAnimating = false;

  function goToSection(index) {
    if (isAnimating) return;

    isAnimating = true;
    currentIndex = index;

    gsap.to(window, {
      duration: 1,
      scrollTo: {
        y: sections[index],
        autoKill: false
      },
      ease: "power2.inOut",
      onComplete: () => {
        isAnimating = false;
      }
    });
  }

  function handleWheel(event) {
    if (isAnimating) return;

    const currentSection = sections[currentIndex];
    const isScrollingDown = event.deltaY > 0;
    const scrollTop = window.scrollY;
    const sectionTop = currentSection.offsetTop;
    const sectionBottom = sectionTop + currentSection.offsetHeight;
    const viewportBottom = scrollTop + window.innerHeight;

    if (currentSection.offsetHeight > window.innerHeight) {
      // Sezione più alta del viewport → permette lo scroll fino ai limiti
      if ((isScrollingDown && viewportBottom < sectionBottom) || (!isScrollingDown && scrollTop > sectionTop)) {
        return; // Permette lo scroll naturale
      }
    }

    // Cambia sezione solo quando si arriva ai limiti
    if (isScrollingDown && currentIndex < sections.length - 1) {
      event.preventDefault();
      goToSection(currentIndex + 1);
    } else if (!isScrollingDown && currentIndex > 0) {
      event.preventDefault();
      goToSection(currentIndex - 1);
    }
  }

  window.addEventListener("wheel", handleWheel, { passive: false });

  // Vai alla prima sezione all'inizio
  goToSection(0);
});

</script> -->



<!-- ---------- ANIMAZIONE HEADER ---------- -->
<!-- ---------- ANIMAZIONE HEADER ---------- -->
<!-- ---------- ANIMAZIONE HEADER ---------- -->

<script>
  import gsap from 'gsap';
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  document.addEventListener("DOMContentLoaded", (event) => {
  gsap.registerPlugin(ScrollTrigger)


  gsap.from(".left-sidebar", {
    x: -100,
    opacity: 1,
    duration: 0.5,
    scrollTrigger: {
      trigger: ".text-section",
      start: "left 50%",
      toggleActions: "restart none none reverse",
       markers: false,
    },
  }); 

  gsap.from(".right-sidebar", {
    x: 100,
    opacity: 1,
    duration: 0.5,
    scrollTrigger: {
      trigger: ".text-section",
      start: "left 50%",
      toggleActions: "restart none none reverse",
      markers: false,
    },
  }); 



  });


</script>





<style>

.big-container {
    overscroll-behavior: none;
    width: 100%;
    height: 100vh;
}

section {
    width: 100%;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: min(5rem, 8%);
    z-index: 1;
    mix-blend-mode: difference;
}

.container {
    display: flex;
    flex-wrap: wrap;
    width: 90%;
    max-width: 1024px;
    margin: 0 auto;
    z-index: 1;
}

h1,h2,h3,h4,h5,h6, p{
    color:var(--gradient);
}



/* Mobile */
@media (max-width: 768px) {
    .container {
        width: 95%;
    }

    
}

/* Tablet */
@media (min-width: 769px) and (max-width: 1024px) {
    .container {
        width: 85%;
    }
}

/* Desktop */
@media (min-width: 1025px) {
    .container {
        max-width: 1200px;
    }
}


.text-section {
    /* background: #f4f4f4; */
    color: #333;
}



/* ---------- MAP SECTION ---------- */
/* ---------- MAP SECTION ---------- */
/* ---------- MAP SECTION ---------- */

.map-section {
  background-size: cover;
  position: relative;
  width: 100%;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.map-bg {
  position: absolute;
  top: 0;
  left: 0;
  background-size: cover;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  mix-blend-mode: normal;
}

.map-bg img {
  width: 200%;
  height: auto;
  transform-origin: center;
  mix-blend-mode: normal;
}

.paragraph-container {
  position: absolute;
  top: 0;
  left: 0;
  color: rgb(0, 0, 0);
  width: 100%;
  height: 100%;
  padding: 75px;
  display: flex;
  align-items: flex-end;
}

.paragraph-box {
  background-color: #ffffff;
  width: 50%;
  height: auto;
  padding: 2vh;
  box-shadow: -5px 8px 40px;
}

.title-container {
  position: absolute;
  top: 20%;
  left: 0;
  color: rgb(0, 0, 0);
  width: 100%;
  height: auto;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}

.title-box {
  background-color: #ffffff;
  width: auto;
  height: auto;
  padding: 1vh 2vh;
  position: relative;
  z-index: 2;
  color: black;
}

.map-section h1,
.map-section h2,
.map-section h3,
.map-section h4,
.map-section h5,
.map-section h6 {
  color: black;
}



.pointer-blur {
  width: 150px;
  height: 150px;
  background-color: white;
  border-radius: 50%;
  filter: blur(40px);
  z-index: 1 !important;
  top: 25%;
  mix-blend-mode: difference;
  position: absolute;
}


/* .themes-row {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 2rem;
    margin-top: 2rem;
  }

  .theme {
    position: relative;
    overflow: hidden;
  }

  .theme-title {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-family: 'Milligram', sans-serif;
    font-size: 1.5rem;
    line-height: normal;
    font-weight: bold;
  }

  .separator {
    opacity: 1;
  }

  .word2 {
    position: relative;
    transform: translateX(0);
    transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .theme-description {
    position: relative;
    height: 0;
    opacity: 0;
    transform: translateY(-20px);
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    margin-top: 0;
    font-size: 1.2rem;
    color: var(--gradient);
  }

  .theme:hover .word2 {
    transform: translateX(calc(50vw - 100%));
  }

  .theme:hover .theme-description {
    height: auto;
    opacity: 1;
    transform: translateY(0);
    margin-top: 1rem;
  } */

  .categories-container {
        margin-top: 20px;
        margin-bottom: 20px;

    }
    
    .category-container {
        display: flex;
        margin-bottom: 10px;
        color: gray;
        text-wrap: nowrap;
    }

    .category {
      text-wrap: nowrap;
    }

    .opposite2 {
        text-align: right;
        flex: 0;
        transition: all 0.3s ease;

    }
    

    .category-container:hover .opposite2 {
        flex: 1;
        transition: all 0.3s ease;
    }

    .category-container:hover {
        color: black;
    }
   

.categories-container {
    margin-top: 20px;
    position: relative;
    display: flex;
    flex-direction: column;
}

.category-container {
    position: relative;
    display: flex;
    flex-direction: column;
    color: gray;
}


.category-name {
  font-family: 'Milligram';
  font-size: 1.5em;
  color: var(--gradient);
  padding-top: 20px;
  padding-bottom: 5px;
  display: flex;
    width: 100%;
}

.category-description {
  margin-top: 10px;
  font-family: 'Milligram Text';
  font-size: 1.2em;
  width: 100%;
    color: var(--gradient);
    text-align: left;
height: auto;
max-height: 0;
opacity: 0;
transition: all 1s ease;

}
.category-description.show {
  opacity: 1;
  max-height: 500px;

  height: calc-size(auto);

  transition: all 1s ease;
} 






.logo-container {
          display: flex;
          justify-content: space-between;
          position: relative;
          top: 0;
          left: 0;
          width: 100%;
          padding: clamp(1rem, 2vw, 2rem);
        }
        
        .logo-left {
          display: flex;
          align-items: center;
          gap: clamp(1rem, 2vw, 2rem);
          width: 60%;
        }
        
        .logo-right {
          width: 30%;
          display: flex;
          align-items: center;
          justify-content: flex-end;
        }
        
        /* Shared styles for all logos */
        .logo-left img,
        .logo-right img {
          height: clamp(3rem, 4vw, 8rem); /* Responsive height using clamp */
          width: auto; /* Width will adjust based on aspect ratio */
          object-fit: contain;
          max-width: 100%; /* Prevent overflow */
        }


</style>